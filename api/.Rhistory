print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
formula<-paste0(inputs[chromosome],collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
get_fitness_1_x <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
exes <- inputs[chromosome]
formula<-paste0("I(1/",exes,")", collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train, na.action = na.exclude)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
get_fitness_x_2 <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
exes <- inputs[chromosome]
formula<-paste0("I(",exes,"^2)", collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train, na.action = na.exclude)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
get_fitness_x_3 <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
exes <- inputs[chromosome]
formula<-paste0("I(",exes,"^3)", collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train, na.action = na.exclude)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
crossover <- function(parents){
p1 <- parents[[1]]
p2 <- parents[[2]]
chromosome_len <- length(p1)
mask1<-rep(0,ceiling(chromosome_len-chromosome_len/2))
mask2 <- rep(1,chromosome_len/2)
mask_last_half <-c(mask1,mask2)
mask1<-rep(1,ceiling(chromosome_len-chromosome_len/2))
mask2 <- rep(0,chromosome_len/2)
mask_first_half <- c(mask1,mask2)
child1 <- mask_first_half*p1+mask_last_half*p2
child2 <- mask_first_half*p2+mask_last_half*p1
return(list(child1,child2) )
}
select_mating_parents <- function(x,pop_size,roullete,population){
sum_fit_p<-
sample(1:sum(roullete$rank),size = 1 )
pindex<-
roullete %>%
filter(cumsum_rank<sum_fit_p) %>%
nrow()
p1<-roullete[pindex+1,] %>% pull(parent)
sum_fit_p<-
sample(1:sum(roullete$rank),size = 1 )
pindex<-
roullete %>%
filter(cumsum_rank<sum_fit_p) %>%
nrow()
p2<-roullete[pindex+1,] %>% pull(parent)
return(population[c(p1,p2)])
}
mutation <- function(child, rate=0.01){
mask <- sample(c(1,0), length(child), replace = TRUE, prob = c(rate, 1-rate))
mutation.child <- xor(child, mask)*1.0
return(mutation.child)
}
get_fitness <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
formula<-paste0(inputs[chromosome],collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
get_fitness_1_x <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
exes <- inputs[chromosome]
formula<-paste0("I(1/",exes,")", collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train, na.action = na.exclude)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
get_fitness_x_2 <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
exes <- inputs[chromosome]
formula<-paste0("I(",exes,"^2)", collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train, na.action = na.exclude)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
get_fitness_x_3 <- function(chromosome,train,test,label){
print(chromosome)
col_names <- names(train)
inputs<-
setdiff(col_names,label)
chromosome <- as.logical(chromosome)
exes <- inputs[chromosome]
formula<-paste0("I(",exes,"^3)", collapse = '+')
formula <- paste0(label,"~",formula)
fit <- lm(formula,data=train, na.action = na.exclude)
pred<-predict(fit,test)
error_square <- sum((pred-test$medv)^2)
return(error_square)
}
train_index <- createDataPartition(Boston$medv,p=0.75,list = F)
train <- Boston[train_index,]
test <- Boston[-train_index,]
pop_size <- 1000
population<-
lapply(1:pop_size, get_chromosome, train=train, label="medv")
for(i in 1:1){
print(paste0("generation= ",i,collapse="") )
fitness <- lapply(population,
get_fitness ,
train=train,test=test, label="medv")
roullete<-
tibble(parent=1:pop_size, fitness= fitness %>% unlist()) %>%
arrange(desc(fitness))
roullete$rank <- 1:nrow(roullete)
roullete <-
roullete %>%
mutate(cumsum_rank = cumsum(rank))
mating_parents<-
lapply(1:(2*pop_size), select_mating_parents,
pop_size=pop_size,
roullete=roullete,
population=population)
children<-
lapply(mating_parents, crossover)
children<-
children %>% unlist(recursive = F)
children<-
children[1:pop_size]
top_parent <- roullete %>% tail(1) %>% pull(parent)
top_parent_fitness <- roullete %>% tail(1) %>% pull(fitness)
print(population[[top_parent]])
print(paste0("top parent fitness ",top_parent_fitness,collapse = " ") )
population<-
lapply(children, mutation, rate=0.01)
}
train_index <- createDataPartition(Boston$medv,p=0.75,list = F)
train <- Boston[train_index,]
train[train == 0] <- 0.000000000001
test <- Boston[-train_index,]
test[test == 0] <- 0.000000000001
pop_size <- 1000
population<-
lapply(1:pop_size, get_chromosome, train=train, label="medv")
for(i in 1:1){
print(paste0("generation= ",i,collapse="") )
fitness <- lapply(population,
get_fitness_1_x ,
train=train,test=test, label="medv")
roullete<-
tibble(parent=1:pop_size, fitness= fitness %>% unlist()) %>%
arrange(desc(fitness))
roullete$rank <- 1:nrow(roullete)
roullete <-
roullete %>%
mutate(cumsum_rank = cumsum(rank))
mating_parents<-
lapply(1:(2*pop_size), select_mating_parents,
pop_size=pop_size,
roullete=roullete,
population=population)
children<-
lapply(mating_parents, crossover)
children<-
children %>% unlist(recursive = F)
children<-
children[1:pop_size]
top_parent <- roullete %>% tail(1) %>% pull(parent)
top_parent_fitness <- roullete %>% tail(1) %>% pull(fitness)
print(population[[top_parent]])
print(paste0("top parent fitness ",top_parent_fitness,collapse = " ") )
population<-
lapply(children, mutation, rate=0.1)
}
train_index <- createDataPartition(Boston$medv,p=0.75,list = F)
train <- Boston[train_index,]
test <- Boston[-train_index,]
pop_size <- 1000
population<-
lapply(1:pop_size, get_chromosome, train=train, label="medv")
for(i in 1:1){
print(paste0("generation= ",i,collapse="") )
fitness <- lapply(population,
get_fitness_x_2 ,
train=train,test=test, label="medv")
roullete<-
tibble(parent=1:pop_size, fitness= fitness %>% unlist()) %>%
arrange(desc(fitness))
roullete$rank <- 1:nrow(roullete)
roullete <-
roullete %>%
mutate(cumsum_rank = cumsum(rank))
mating_parents<-
lapply(1:(2*pop_size), select_mating_parents,
pop_size=pop_size,
roullete=roullete,
population=population)
children<-
lapply(mating_parents, crossover)
children<-
children %>% unlist(recursive = F)
children<-
children[1:pop_size]
top_parent <- roullete %>% tail(1) %>% pull(parent)
top_parent_fitness <- roullete %>% tail(1) %>% pull(fitness)
print(population[[top_parent]])
print(paste0("top parent fitness ",top_parent_fitness,collapse = " ") )
population<-
lapply(children, mutation, rate=0.1)
}
train_index <- createDataPartition(Boston$medv,p=0.75,list = F)
train <- Boston[train_index,]
test <- Boston[-train_index,]
pop_size <- 1000
population<-
lapply(1:pop_size, get_chromosome, train=train, label="medv")
for(i in 1:1){
print(paste0("generation= ",i,collapse="") )
fitness <- lapply(population,
get_fitness_x_3 ,
train=train,test=test, label="medv")
roullete<-
tibble(parent=1:pop_size, fitness= fitness %>% unlist()) %>%
arrange(desc(fitness))
roullete$rank <- 1:nrow(roullete)
roullete <-
roullete %>%
mutate(cumsum_rank = cumsum(rank))
mating_parents<-
lapply(1:(2*pop_size), select_mating_parents,
pop_size=pop_size,
roullete=roullete,
population=population)
children<-
lapply(mating_parents, crossover)
children<-
children %>% unlist(recursive = F)
children<-
children[1:pop_size]
top_parent <- roullete %>% tail(1) %>% pull(parent)
top_parent_fitness <- roullete %>% tail(1) %>% pull(fitness)
print(population[[top_parent]])
print(paste0("top parent fitness ",top_parent_fitness,collapse = " ") )
population<-
lapply(children, mutation, rate=0.1)
}
library(tidyverse)
library(caret)
library(leaps)
install.packages(c("tidyverse", "leaps"))
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "seqrep")
summary(models)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "forward",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "forward")
summary(models)
library(leaps)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$results
step.model$bestTune
summary(step.model$finalModel)
coef(step.model$finalModel, 4)
coef(step.model$finalModel, 5)
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "forward",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "forward")
summary(models)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$bestTune
summary(step.model$finalModel)
coef(step.model$finalModel, 5)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "forward",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "forward")
summary(models)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
#nvmax: the number of variable in the model. For example nvmax = 2, specify the best 2-variables model
#RMSE and MAE are two different metrics measuring the prediction error of each model. The lower the RMSE and MAE, the better the model.
#Rsquared indicates the correlation between the observed outcome values and the values predicted by the model. The higher the R squared, the better the model.
step.model$bestTune
summary(step.model$finalModel)
coef(step.model$finalModel, 5)
step.model$results
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$results
coef(step.model$finalModel, 5)
step.model$bestTune
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "backward",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "backward")
summary(models)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$results
step.model$bestTune
summary(step.model$finalModel)
coef(step.model$finalModel, 5)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "backward",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "backward")
summary(models)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$results
step.model$bestTune
summary(step.model$finalModel)
coef(step.model$finalModel, 5)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggcorrplot)
train_data <- read.csv("./Galileo/Econometria/Proyecto/train.csv", header = TRUE)
test_data <- read.csv("./Galileo/Econometria/Proyecto/test.csv", header = TRUE)
head(test_data)
#++++++++++++++++++++++++++++++++++++++++++++++++
# USING STEPWISE
full.model <- lm(Chance.of.Admit ~., data = swiss)
#++++++++++++++++++++++++++++++++++++++++++++++++
# USING STEPWISE
full.model <- lm(Chance.of.Admit ~., data = train_data)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "forward",
trace = FALSE)
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "forward",
trace = FALSE)
summary(step.model)
models <- regsubsets(Chance.of.Admit~., data = train_data, nvmax = 5,
method = "forward")
summary(models)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Chance.of.Admit ~., data = train_data,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$results
cormat <- round(cor(train_data),2)
head(cormat)
ggcorrplot(cormat, hc.order = TRUE, type = "lower",
lab = TRUE)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggcorrplot)
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
train_data <- read.csv("./Galileo/Econometria/Proyecto/train.csv", header = TRUE)
test_data <- read.csv("./Galileo/Econometria/Proyecto/test.csv", header = TRUE)
head(test_data)
head(train_data)
cormat <- round(cor(train_data),2)
head(cormat)
ggcorrplot(cormat, hc.order = TRUE, type = "lower",
lab = TRUE)
lm.fit <- lm(Chance.of.Admit~TOEFL.Score+GRE.Score+CGPA, data = train_data)
lm2.fit <- lm(Chance.of.Admit~TOEFL.Score+GRE.Score+CGPA+LOR^2+Research^3, data = train_data)
summary(lm2.fit)
library(plumber)
setwd('/Users/alanhurtarte/Galileo/Product Dev/Proyecto/api')
r <- plumb("prediction_api.R")
